plugins {
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

allprojects {
	group = 'dimage'
	version = '0.0.1-SNAPSHOT'
}

java {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// lombok
	compileOnly 'org.projectlombok:lombok'

	// dataSource
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	runtimeOnly 'com.h2database:h2'

	//JWT
	implementation "io.jsonwebtoken:jjwt:${JWTVersion}"
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// validation
	implementation "org.hibernate:hibernate-validator:${hibernateValidatorVersoin}"

	//swagger
	implementation("io.springfox:springfox-swagger-ui:${swaggerVersion}")
	implementation("io.springfox:springfox-swagger2:${swaggerVersion}")

	//xlsx
	implementation "org.apache.poi:poi-ooxml:${poiOoxmlVersion}"

	// aop
	implementation 'org.springframework.boot:spring-boot-starter-aop'

	// querydsl
	implementation("com.querydsl:querydsl-core") // querydsl
	implementation("com.querydsl:querydsl-jpa") // querydsl
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jpa"
	annotationProcessor("jakarta.persistence:jakarta.persistence-api")
	annotationProcessor("jakarta.annotation:jakarta.annotation-api")

	// aws
	implementation("org.springframework.cloud:spring-cloud-starter-aws:${springCloudAWSVersion}")

	// log4j
	implementation("org.apache.logging.log4j:log4j-api:${log4jVersion}")
	implementation("org.apache.logging.log4j:log4j-to-slf4j:${log4jVersion}")

	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	//embedded-redis
	implementation("it.ozimov:embedded-redis:${embeddedRedisVersion}")
}

test {
	useJUnitPlatform()
}

processResources.dependsOn('copySecrets')

task copySecrets(type: Copy) {
	from './security/application-oauth.yml'
	into './src/main/resources'

	from './security/application-prod.yml'
	into './src/main/resources'
}

// querydsl
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
	main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
	options.annotationProcessorGeneratedSourcesDirectory(file(querydslDir))
}

clean.doLast {
	file(querydslDir).delete()
}
